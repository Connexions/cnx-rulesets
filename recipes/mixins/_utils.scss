/// Base titling and numbering mixin - Creates <span> elements before an element defined by the content passed. These <span> elements can be automatically wrapped and/or sent to a specified bucket
/// @arg {Map} $content - A content map containing key and value pairs. Each key, value pair creates a <span> of class="key" with a text node of "value"
/// @arg {Text} $bucket [null] - The unquoted name of the bucket to send the resulting object(s) to. If null, resulting object(s) will remain in place, before the element the mixin was called within
/// @arg {Text} $container [null] - The unquoted type of container element to send the titling spans to (e.g. h1, h2, div). If null, resulting spans will not be wrapped
/// @arg {String} $containerType [null] - The data-type to give to the created container element. If null, resulting spans will not be wrapped
/// @group utils
@mixin utils_title($content, $bucket: null, $container: null, $containerType: null) {
  //TODO: Restrict what things titlePart can be. Currently any key will work.
  @each $titleClassName in map-keys($content) {
    $titleValue: map-get($content, $titleClassName);
    &::before {
      container: span;
      content: $titleValue;
      class: $titleClassName;
      @if ($container != null and $containerType != null) {
        move-to: #{$container}-TITLECONTAINER
      } @else if ($bucket != null) {
        move-to: $bucket;
      }
    }
  }
  @if ($container != null and $containerType != null) {
    &::before {
      container: $container;
      data-type: $containerType;
      content: pending(#{$container}-TITLECONTAINER);
      @if ($bucket != null) {
        move-to: $bucket;
      }
    }
  }
}

//Relies on hitting To Selector then From Selector without anything in between repeatedly
//:'( this is less robust and useful than originally envisioned, still works great for solutions -> exercises though
//Additionally a counter may not need to be passed, and a new method could rely on an internal counter
//Stronger linking idea:
//pass1: create objects
//pass2: give similar ids to objects to be linked (e.g. #problem-3, #solution-3)
//pass3: link the objects in any order because you know both ids

/// Links pairs of elements that occur in the tree in order: To, From, To, From, ... with no exceptions
/// @arg {String} $toSelector - The selector of the element in the pair that will be linked to
/// @arg {String} $fromSelector - The selector of the element in the pair that will be the link
/// @arg {Text} $toCounter [null] - The counter object used to automatically ID the element to be linked to if it doesn't already have an id. If null, the link href will be to an already existing id of the linked-to element
/// @group utils
@mixin utils_hasSolution($trashHalf) {
  @if $trashHalf {
    :not([data-type="example"]) > [data-type="exercise"] {
      [data-type="solution"] {
        string-set: isSolution " os-hasSolution";
      }
      string-set: isSolution "";
      &::deferred {
        class: attr(class) string(isSolution) ;
      }
    }
  } @else {
    :not([data-type="example"]) > [data-type="exercise"] {
      [data-type="solution"] {
        string-set: isSolution " os-hasSolution ";
      }
      string-set: isSolution "";
      &::deferred {
        class: attr(class) string(isSolution, " ") ;
      }
    }
  }
}

/// A simple call to clear the trash at the end of a pass/step
/// @group utils
@mixin utils_clearTrash() {
  body:deferred::after {
    content: clear(trash);
  }
}

@mixin utils_cleanUp() {
  div.delete-me {
    move-to: trash;
  }
}

