//TODO: notes inside of notes

@mixin baseNoteStyle() {
  width: 100%;
  box-decoration-break: slice;
  box-sizing: border-box;
}



@mixin simpleNote($titleColor,$borderColor, $titleBGcolor, $fontType, $bodyFontColor, $bgColor) {
  @include baseNoteStyle();
  border: solid 1px $borderColor;
  h3[data-type="title"] {
    @include titles-h3-style($font: $fontType ,$title-color: $titleColor);
    background: $titleBGcolor;
  }
  .os-note-body {
    background: $bgColor;
    color: $bodyFontColor;
    h4[data-type="title"] {
      @include titles-h4-style($font: $fontType, $title-color: $titleColor);
    }
  }
}

@mixin noteTopBar($titleColor, $borderColor, $topBorderColor, $fontType, $bodyFontColor) {
  @include baseNoteStyle();

  h3[data-type="title"] {
    @include titles-h3-style($font: $fontType, $title-color: $titleColor);
    display: block;
    border-top: 5px solid $topBorderColor; //todo: thickness varia
    border-top-right-radius: 5px; //todo: radius variables
    border-top-left-radius: 5px;
    border-bottom: solid 1px $borderColor; // border variable?

    letter-spacing: 4px;
    text-transform: uppercase;
    page-break-after: avoid;
    position: relative;
    top: -5px;
    left: -1px;
    //width: @note-border-top-width;
    font-weight: bold;
  }
  .os-note-body {
    color: $bodyFontColor;
    h4[data-type="title"] {
      @include titles-h4-style($font: $fontType, $title-color: $titleColor);
    }
  }
}


@mixin note($noteSettings) {
  @each $note in $noteSettings {

    $noteType: map-get($note, noteType);
    $noteName: map-get($note, name);
    $noteBodyColor: nested-map-get($note, color-scheme, noteBodyFontColor);
    $noteBGColor: nested-map-get($note, color-scheme, noteBGColor);
    $titleFontType: nested-map-get($note, config, titleFontType);
    $noteTitleColor: nested-map-get($note, color-scheme, noteTitleColor);
    $noteTitleBGColor: nested-map-get($note, color-scheme, noteTitleBGcolor);
    $noteTopBorderColor: nested-map-get($note, color-scheme, noteTopBorderColor);
    $noteBorderColor: nested-map-get($note, color-scheme, noteBorderColor);

    [data-type="note"] {
      &.#{$noteName} {
        @if $noteType == simpleNote {
         @include simpleNote($noteTitleColor, $noteBorderColor, $noteTitleBGColor, $titleFontType, $noteBodyColor, $noteBGColor );
        }
        @else if $noteType == noteTopBar {
         @include noteTopBar($noteTitleColor,$noteBorderColor, $noteTopBorderColor, $titleFontType, $noteBodyColor);
        }
      }
    }
  }
}



@mixin baseNotesStyles() {

  svg text {
    fill: color-map(featureBodyText) !important; //this is necessary to override the inline svg fill
  }

  a {
    &:link {
      @include link-style(color-map(noteLink));
    }
    //this might have to move to a theme, I think this is only in business
    // &.xref {
    //   prince-text-replace: "Section" $blank; //Remove "Section" text from links in notes.
    // }
  }
  //TODO: find an exercise in a note and style it
  // .exercise {
  //   > .title,
  //   .solution {
  //     font-size: size-scale(1);
  //   }
  // }
}
@mixin notes ($title-background-color, $background-color, $icon, $notes-body-text-color: color-map(featureBody1), $icon-width: 110px, $icon-height: 62px, $icon-top: 2px, $icon-right: 15px, $border-bottom-left-radius: 0, $border-bottom-right-radius: 0, $border-top-left-radius: 5px, $border-top-right-radius: 5px) {
  @include baseNotesStyles();
  background-color: $background-color;
  border-bottom-left-radius: $border-bottom-left-radius;
  border-bottom-right-radius: $border-bottom-right-radius;
  box-sizing: border-box;

  h3[data-type="title"] {
    background-color: $title-background-color;
    color: color-map(standard-white);
    border-top-left-radius: $border-top-left-radius;
    border-top-right-radius: $border-top-right-radius;
    //.scale-padding(1, padding);
    letter-spacing: 3px;
    text-transform: uppercase;
  }

  .os-note-body {
    &::before {
      display: block;
      content: '';
      // background: url("../books/#{$bookName}/images/#{$icon}.svg") no-repeat 0;
      width: $icon-width;
      height: $icon-height;
      position: absolute;
      bottom: $icon-top;
      right: $icon-right;
    }
  }
}
@mixin note-border-top($note-border-color, $border-radius: 3px, $border-top: 5px) {
  @include baseNotesStyles();

  h3[data-type="title"] {
    border-top: $border-top solid $note-border-color;
    border-top-right-radius: $border-radius;
    border-top-left-radius: $border-radius;
    border-bottom: solid 1px $note-border-color;
    letter-spacing: 4px;
    text-transform: uppercase;
    //  #utils>#pb>.after(avoid);
    //.scale-padding(2, padding);
    //width: $note-border-top-width;
  }
  border-left: solid 1px $note-border-color;
  border-right: solid 1px $note-border-color;
  border-bottom: solid 1px $note-border-color;
  //override base generic styles for notes
  padding: 0;
  margin: 0;
  top: 10px;
  //override generic note corners
  border-top-right-radius: 0;
  border-top-left-radius: 0;
  width: 100%;

  .os-note-body {
    border: 0;
    h4[data-type="title"] {
      @include titles-h4-style($title-color: color-map(featureBodyText));
    }
  }

  a:link {
    //@mixin link-style($body-link-color);
  }
}
