//***
//*** Notes are defined via two means: settings defined in the function notes-settings
//*** in theme/_notes-settings and color schemes defined in custom maps in
//*** theme/_notes-settings.
//***


//TODO: notes inside of notes


@mixin baseNoteStyle() {
  width: 100%;
  box-decoration-break: slice;
  box-sizing: border-box;
  margin-bottom: size-scale(1);
  // h3[data-type="title"] {
  //   margin-bottom: size-scale(-20);
  // }
  svg text {
    fill: color-map(featureBodyText) !important; //this is necessary to override the inline svg fill
  }

  a {
    &:link {
      @include link-style(settings(note-link));
    }
  }
  .os-note-body {
    // line-height: settings(note-body-line-height);
    // padding-left: settings(note-body-padding-left);
    // padding-right: settings(note-body-padding-right);
    line-height: line-height(1);
    padding-left: size-scale(2);
    padding-right: size-scale(2);
    p {
      // padding-bottom: size-scale(1)
    }
  }
}

@mixin noteBody($bgColor, $bodyFontColor, $borderColor) {
  background: $bgColor;
  color: $bodyFontColor;
  border: settings(note-border) $borderColor;
  border-bottom: settings(note-border) $bottomBorderColor;
  line-height: settings(note-body-line-height);
  padding-left: settings(note-body-padding-left);
  padding-right: settings(note-body-padding-right);
}

@mixin baseNoteTitle () {
  font-weight: settings(note-title-weight);
  font-family: font-map(serif);
  page-break-after: avoid;
}

//todo: nest notes: come up with a dynamic title selector
@mixin noteTitle ($type, $titleColor) {
  margin-bottom: size-scale(-20);
  @include baseNoteTitle;
  $headerSize: index-header-size($type);
  font-size: size-scale($headerSize);
  color: $titleColor;
  line-height: line-height($headerSize);
  // padding: settings(note-title-padding); //why, oh why isn't this padding working??
}

@mixin noteSubtitle ($type, $titleColor) {
  @include baseNoteTitle;
  $headerSize: index-header-size($type);
  font-size: size-scale($headerSize);
  color: $titleColor;
  margin-top: settings(note-subtitle-top-margin);
}

@mixin noteTopHead () {
  letter-spacing: settings(note-title-letter-spacing);
  text-transform: uppercase;
  padding: settings(note-title-padding);
}


@mixin simpleNote($titleColor, $subtitleColor, $borderColor, $titleBGcolor, $bodyFontColor, $bgColor, $image: null) {

  @include baseNoteStyle();

  h3[data-type="title"] {
    @include noteTitle(h3, $titleColor);
    @include noteTopHead;
    background: $titleBGcolor;
    border-top-right-radius: settings(note-top-border-radius); //todo: radius variables
    border-top-left-radius: settings(note-top-border-radius);
    @if $image {
      background: url($image) $titleBGcolor no-repeat right;
      background-size: contain;
    }

  }
  .os-note-body {
    background: $bgColor;
    color: $bodyFontColor;
    border: settings(note-border) $borderColor;

    h4[data-type="title"] {
      @include noteSubtitle(h4, $subtitleColor);
    }
  }
}

@mixin noteTopBorder($titleColor, $subtitleColor, $borderColor, $topBorderColor, $bodyFontColor) {

  @include baseNoteStyle();

  border-left: settings(note-border) $borderColor;
  border-right: settings(note-border) $borderColor;
  border-top-right-radius: settings(note-TopBar-border-radius);
  border-top-left-radius: settings(note-TopBar-border-radius);
  h3[data-type="title"] {

    @include noteTitle(h3, $titleColor);
    @include noteTopHead;

    border-top: settings(note-TopBar-border-radius) settings(note-TopBar-border) $topBorderColor;
    border-bottom:  settings(note-border) $borderColor;
    border-top-right-radius: settings(note-TopBar-border-radius);
    border-top-left-radius: settings(note-TopBar-border-radius);
  }
  .os-note-body {
    color: $bodyFontColor;
    border-bottom: settings(note-border) $borderColor;
    h4[data-type="title"] {
      @include noteSubtitle(h4, $subtitleColor);
    }
    p:last-child {
      padding-bottom: 0;
    }
  }
}


@mixin note($noteSettings) {
  @each $note in $noteSettings {
    $getScheme: map-get($note, color-scheme);
    $noteType: map-get($note, noteType);
    $noteName: map-get($note, name);
    $noteImage: map-get($note, image);
    $noteBodyColor: map-get($getScheme, noteBodyFontColor);
    $noteBGColor: map-get($getScheme, noteBGColor);
    $noteTitleColor: map-get($getScheme, noteTitleColor);
    $noteSubtitleColor: map-get($getScheme, noteSubtitleColor);
    $noteTitleBGColor: map-get($getScheme, noteTitleBGcolor);
    $noteTopBorderColor: map-get($getScheme, noteTopBorderColor);
    $noteBorderColor: map-get($getScheme, noteBorderColor);

    [data-type="note"] {
      &.#{$noteName} {
        @if $noteType == simpleNote {
         @include simpleNote($noteTitleColor, $noteSubtitleColor, $noteBorderColor, $noteTitleBGColor, $noteBodyColor, $noteBGColor, $noteImage);
        }
        @else if $noteType == noteTopBorder {
         @include noteTopBorder($noteTitleColor,$noteSubtitleColor, $noteBorderColor, $noteTopBorderColor, $noteBodyColor);
        }
      }
    }
  }
}
