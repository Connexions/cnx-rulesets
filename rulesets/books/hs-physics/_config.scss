/*==========================================================
  HIGH SCHOOL PHYSICS PAGES
==========================================================*/
$sectionSummaryClass: "summary";
//Make pages
$pageKeyTerms               : ( name: "Key Terms", source: "glossary", isGlossary: true, sortBy: "dl > dt" );

/*
  Section Summary

  These should be collated at the end of a chapter
  and separated by which section they came from.

  Markup: ./styleguide/book.composite.summary.xhtml-baked.xhtml

  Style guide: book.2-composite.summary
*/
$pageSummary                : ( name: "Section Summary", source: "#{$sectionSummaryClass}", sectionSeparated: false );

/*
  Key Equations

  These should be collated at the end of a chapter

  **Notes:** Even without the styling you can see a few problems with the ruleset code:
  1. the rulesets use the class attribute when they should use the `data-type`
  1. the solution is being duplicated
  1. the solution is inside the link text that points back to the problem
  1. new id's are generated rather than using the existing id attributes for the problem and solution

  Markup: ./styleguide/book.composite.key-equations.xhtml-baked.xhtml

  Style guide: book.2-composite.key-equations
*/
$pageKeyEquations           : ( name: "Key Equations", source: "key-equations", sectionSeparated: false );

/*
  Concept Items

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.concept.xhtml-baked.xhtml

  Style guide: book.2-composite.concept
*/

$pageConceptItems           : ( name: "Concept Items", source: "concept", sectionSeparated: true );

/*
  Critical Thinking Items

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.critical-thinking.xhtml-baked.xhtml

  Style guide: book.2-composite.critical-thinking
*/
$pageCriticalThinking       : ( name: "Critical Thinking Items", source: "critical-thinking", sectionSeparated: true );

/*
  Problems

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.problems.xhtml-baked.xhtml

  Style guide: book.2-composite.problems
*/
$pageProblems               : ( name: "Problems", source: "ost-chapter-review.problem", sectionSeparated: true );

/*
  Performance Task

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.performance.xhtml-baked.xhtml

  Style guide: book.2-composite.performance
*/
$pagePerformance            : ( name: "Performance Task", source: "performance", sectionSeparated: true );

/*
  Multiple Choice

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.multiplechoice.xhtml-baked.xhtml

  Style guide: book.2-composite.multiplechoice
*/
$pageMultipleChoice         : ( name: "Multiple Choice", source: "multiple-choice", sectionSeparated: true);

/*
  Short Answer

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.shortanswer.xhtml-baked.xhtml

  Style guide: book.2-composite.shortanswer
*/
$pageShortAnswer            : ( name: "Short Answer", source: "short-answer", sectionSeparated: true );

/*
  Extended Response

  These should be collated at the end of a chapter

  Markup: ./styleguide/book.composite.extendedresponse.xhtml-baked.xhtml

  Style guide: book.2-composite.extendedresponse
*/
$pageExtendedResponse        : ( name: "Extended Response", source: "extended-response", sectionSeparated: true );

$pageIndex                   : ( name: "Index", source: "index", isIndex: true );


/*
  Chapter Review

  These should be collated at the end of a chapter.

  Compound Composite that contains: contains Concept Items, Critical Thinking, Performance Task

  Markup: ./styleguide/book.compoundcomposite.chapterreview.xhtml-baked.xhtml

  Style guide: book.compoundcomposite.chapterreview
*/
$compoundReview               : ( $pageConceptItems, $pageCriticalThinking, $pageProblems, $pagePerformance,);

$pageChapterReview            : ( name: "Chapter Review", source: "chapter-review", contains: $compoundReview, EOCcompoundComposite: true );

/*
  Test Prep

  These should be collated at the end of a chapter.

  Compound Composite that contains: Test Prep Multiple Choice, Test Prep Short Answer, Test Prep Extended Response

  Markup: ./styleguide/book.compoundcomposite.testprep.xhtml-baked.xhtml

  Style guide: book.compoundcomposite.testprep
*/
$compoundTestPrep             : ( $pageMultipleChoice, $pageShortAnswer,  $pageExtendedResponse );

$pageTestPrep                 : ( name: "Test Prep", source: "test-prep", contains: $compoundTestPrep, EOCcompoundComposite: true );


$chapterCompositePages        : (
  $pageKeyTerms, $pageSummary, $pageKeyEquations, $pageChapterReview, $pageTestPrep
);

$EOCcompoundComposites         : ( $pageChapterReview, $pageTestPrep );

$bookCompositePages: (
  //This does not get parsed as a list without a comma at the endthe composite builder should account for this rather than using hacky syntax,
  $pageIndex,
);

/*==========================================================
  HIGH SCHOOL PHYSICS TITLING CONTENT
==========================================================*/

//unfortunately a base obj cannot be created for all Content because it would make the order of the keys static
//when they need to be able to be in any order because of possible changes in titling order between books
//Usage Note: key: class of the containing span, value: text that will go inside span
$chapterTitleContent        : ( number : counter(chapter), );

$appendixTitleContent       : ( title-label : "Appendix ", number : counter(appendix, upper-alpha), );

$sectionTitleContent        : ( number : counter(chapter) "." counter(section), );

$exerciseTitleContent       : ( divider : ". ", number : counter(exercise) );
$equationNumber             : ( number : counter(chapter) "." counter(equation) );

// FIXME: The fields in this list are generated in reverse order for some reason
$exerciseContentTitleContent: ( number : counter(exerciseMaybeInContent), title-label : "Exercise" );
$solutionContentTitleContent: null;

/*
  Teacher Support  note

  Contains a title "Teacher Support"

  Markup: ./styleguide/page.note.teacher.xhtml-baked.xhtml

  Style guide: page.note.teacher
*/
$teacherSupportNote         : ( label : "Teacher Support", selector : os-teacher );

/*
  Section Learning Objectives note

  Contains a title "Section Learning Objectives"

  Markup: ./styleguide/page.note.learningobjectives.xhtml-baked.xhtml

  Style guide: page.note.learningobjectives
*/
$learningObjectivesNote     : ( label : "Section Learning Objectives", selector : learning-objectives );
/*
  Boundless Physics note

  Contains a title "Boundless Physics" and a body containing a title and the contents of the note.

  Markup: ./styleguide/page.note.boundlessphysics.xhtml-baked.xhtml

  Style guide: page.note.boundlessphysics
*/
$boundlessPhysicsNote       : ( label : "Boundless Physics", selector : boundless-physics, isBodyWrapped: true );

/*
  Misconception Alert note

  Contains a title "Misconception Alert".

  Markup: ./styleguide/page.note.misconception.xhtml-baked.xhtml

  Style guide: page.note.misconception
*/
$misconceptionNote          : ( label : "Misconception Alert", selector : ost-misconception, );

/*
  Teacher Demonstration note

  Contains a title "Teacher Demonstration".

  Markup: ./styleguide/page.note.workout.xhtml-baked.xhtml

  Style guide: page.note.workout
*/
$teacherDemonstrationNote   : ( label : "Teacher Demonstration", selector : ost-teacher-demonstration, );

/*
  Grasp Check note

  Contains a title "Grasp Check".

  Markup: ./styleguide/page.note.grasp-check.xhtml-baked.xhtml

  Style guide: page.note.grasp-check
*/
$graspCheckNote             : ( label : "Grasp Check", selector : grasp-check, );

/*
  Snap Lab note

  Contains a title "Snap Lab" and wrap the body.

  Markup: ./styleguide/page.note.snap-lab.xhtml-baked.xhtml

  Style guide: page.note.snap-lab
*/
$snapLabNote                : ( label: "Snap Lab", selector: snap-lab, isBodyWrapped: true, );

/*
  Worked Example note

  Contains a title "Worked Example" and wraps the body.

  Markup: ./styleguide/page.note.worked-example.xhtml-baked.xhtml

  Style guide: page.note.worked-example
*/
$workedExampleNote           : ( label: "Worked Example", selector: worked-example, isBodyWrapped: true );
/*
  Tips For Success note

  Contains a title "Tips For Success".

  Markup: ./styleguide/page.note.tips-for-success.xhtml-baked.xhtml

  Style guide: page.note.tips-for-success
*/
$tipsSuccessNote            : ( label: "Tips For Success", selector: tips-for-success, );

/*
  Work In Physics note

  Contains a title "Work In Physics" and wraps body.

  Markup: ./styleguide/page.note.work-in-physics.xhtml-baked.xhtml

  Style guide: page.note.work-in-physics
*/
$workedPhysicsNote          : ( label: "Work In Physics", selector: work-in-physics, isBodyWrapped: true );

/*
  Fun In Physics note

  Contains a title "Fun In Physics".

  Markup: ./styleguide/page.note.fun-in-physics.xhtml-baked.xhtml

  Style guide: page.note.fun-in-physics
*/
$funPhysicsNote             : ( label: "Fun In Physics", selector: fun-in-physics, );

/*
  Links to Physics note

  Contains a title "Links to Physics" and wraps body.

  Markup: ./styleguide/page.note.links-to-physics.xhtml-baked.xhtml

  Style guide: page.note.links-to-physics
*/
$linksPhysicsNote            : ( label: "Links To Physics", selector: links-to-physics, isBodyWrapped: true );

/*
  Watch Physics note

  Contains a title "Watch Physics" and wraps body.

  Markup: ./styleguide/page.note.watch-physics.xhtml-baked.xhtml

  Style guide: page.note.watch-physics
*/
$watchPhysicsNote           : ( label: "Watch Physics", selector: watch-physics, isBodyWrapped: true );

/*
  Virtual Physics note

  Contains a title "Virtual Physics" and wraps the body.

  Markup: ./styleguide/page.note.virtual-physics.xhtml-baked.xhtml

  Style guide: page.note.virtual-physics
*/
$virtualPhysicsNote         : ( label: "Virtual Physics", selector: virtual-physics, isBodyWrapped: true );

$captionTableNumber         : ( title-label: "Table ", number: counter(chapter) "." counter(table) );
//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionTableNumberAp       : ( title-label: "Table ", number: counter(appendix, upper-alpha) "." counter(table) );

$captionFigNumber           : ( title-label: "Figure ", number: counter(chapter) "." counter(figure) );

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionFigNumberAp         : ( title-label: "Figure ", number: counter(appendix, upper-alpha) "." counter(figure) );
$symbolsSectionTitle: "Symbols";

/*==========================================================
  HIGH SCHOOL PHYSICS CONFIG
==========================================================*/

$setTableCaption            : ( type: table, defaultContainer: caption, hasCaption: true, hasTitle: true, exceptionClassNames: ('key-terms',) );

$setFigureCaption           : ( type: figure, defaultContainer: figcaption, hasCaption: true, hasTitle: true );

//If this method of setting the content of the label explicity becomes a problem,
//try grabbing the numbering information from the element's header

//NOTE: These selectors MUST match the counting selectors or be more specific
//otherwise, the increment and the counter() call may fire in the wrong order
//This may be fixed in a later version of easybake
$targetLabels: (
  (
    selector    : '.os-eoc [data-type="exercise"]',
    label       : "Exercise " counter(chapter) "." counter(exercise)
  ),
  (
    selector    : 'div[data-type="chapter"] .example',
    label       : "Example " counter(chapter) "." counter(example)
  ),
  (
    selector    : '[data-type="chapter"] :not(table) > table:not(.unnumbered)',
    label       : "Table " counter(chapter) "." counter(table)
  ),
  (
    selector    : '[data-type="chapter"] :not(figure) > figure:not(.unnumbered)',
    label       : "Figure " counter(chapter) "." counter(figure)
  ),
  (
    selector    : '[data-type="appendix"] :not(table) > table:not(.unnumbered)',
    label       : "Table " counter(appendix, upper-alpha) "." counter(table)
  ),
  (
    selector    : '[data-type="appendix"] :not(figure) > figure:not(.unnumbered)',
    label       : "Figure " counter(appendix, upper-alpha) "." counter(figure)
  )
);


/*
  Grasp Check

  This is an exercise that is fetched from exercises.openstax.org.
  It should be rendered with the label "Grasp Check" (from the data-label attribute).

  Markup: ./styleguide/page.exercise.grasp-check.xhtml-baked.xhtml

  Style guide: page.exercise.grasp-check
*/
