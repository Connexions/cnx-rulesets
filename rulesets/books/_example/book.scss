// This is the ROOT of the output CSS file that is generated.
// It does the following:

// Import all the mixins and enums
@import '../../common/_all';

// Import the book-specific config file
@import './_config';

// The following is copy/pasta from ../_example/book.scss but left here so diffs are clearer
:pass(0) {
  //Some modifications to be done to the book before any collation
  @include modify_titlePreface();
  @include modify_spanWrapTitles();
  @include modify_simLinkTarget();

  // Any notes that need to trash the solution
  @each $note in $Config_Notes {
    $className: map-get($note, className);
    $moveSolutionTo: map-get($note, moveSolutionTo);
    @include validate_type($className, string);
    @include validate_enumOptional($moveSolutionTo, $AREA__PREFIX__);

    @if $moveSolutionTo == $AREA_TRASH {
      @include modify_trash('.#{$className} [data-type="solution"]');
    } @else {
      // TODO Skip reconstructing a new object for modify_note
      $label: map-get($note, label);
      $isBodyWrapped: map-get($note, isBodyWrapped);

      @include validate_typeOptional($label, string);

      @if $label {
        @include modify_note((selector: $className, label: $label, isBodyWrapped: $isBodyWrapped));
      }
    }
  }

  // Only mark up solutions if they will not be discarded (optimization)
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
  } @else {
    @include utils_hasSolution();
  }

  //the metadata has been moved to the content, remove it from the metadata
  @include modify_trash('[data-type="metadata"] > [data-type="description"]');
}
:pass(1) {
  // These have no dependencies so I do not know why they require having to be here
  // (as opposed to being right at the top of :pass(0) )
  // but the fact that the list is inside a note seems to be the culprit.
  // maybe the modify_note code runs first and makes a copy of the element `::before`
  // This list code runs? (even though the listMakeLabelVisible was listed above modify_note)
  @include modify_wrapExercises(); // no dependencies
  @include modify_wrapLists(); // no dependencies

  //Come up with mixins for common numbering schemes as per Phil's suggestion
  @include count_countChapters(chapter);
  @include number_numberChapters($Config_ChapterTitleContent);
  @include count_countAppendices(appendix);
  @include number_numberAppendices($Config_AppendixTitleContent);
  @include count_countSections(section);
  @include number_numberSections($Config_SectionTitleContent);

  // Count examples when moveTo: $AREA_NONE (no moving)
  @include validate_enumOptional(map-get($Config_PartType_Example, moveTo), $AREA__PREFIX__);
  @if map-get($Config_PartType_Example, moveTo) == $AREA_NONE {
    $titleContent:  map-get($Config_PartType_Example, titleContent);
    $solutionTitleContent:  map-get($Config_PartType_Example, solutionTitleContent);

    @include count_countExamples(example);
    @include number_numberExamples($titleContent, $solutionTitleContent);
  }

  // Number equations if they have a titleContent
  // @include validate_enum(map-get($Config_PartType_Equation, moveTo), $AREA__PREFIX__);
  $titleContent               : map-get($Config_PartType_Equation, titleContent);
  $excludeNumberingInClassName: map-get($Config_PartType_Equation, excludeNumberingInClassName);
  $numberAt                   : map-get($Config_PartType_Equation, numberAt);
  @if $titleContent {
    @include validate_type($excludeNumberingInClassName, string);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include count_countEquations(equation);
    @if $numberAt == $NUMBER_BEFORE_MOVE {
      @include number_equations($titleContent, $excludeNumberingInClassName);
    }
  }

  // @include count_countExamples(example);
  // @include number_numberExamples($exampleTitleContent, $exampleSolutionTitleContent);

  // Count and number any Notes that need it
  @each $note in $Config_Notes {
    $className: map-get($note, className);
    $titleContent: map-get($note, titleContent);
    @include validate_type($className, string);

    @if $titleContent {
      @include number_numberNote($className, $titleContent);
    }
  }

  @include count_countTerms(term);
  @include reference_refPageIDStringAs(pageID);
  @include modify_prepIndexTerms(term, pageID);

  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @include compose_createChapterComposites($Config_ChapterCompositePages, sectionHeaderNode);

  //create a chapter outline
  $outlineTitle: map-get($Config_PartType_Chapter, outlineTitle);
  @include validate_typeOptional($outlineTitle, string);
  @if $outlineTitle {
    @include compose_chapterOutline($outlineTitle);
  }


}
:pass(2) {
  //After: ???
  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @include reference_refSectionHeaderStringAs(sectionHeaderString);
  @include compose_prepBookComposites($Config_BookCompositePages, sectionHeaderNode, sectionHeaderString);

  //move the chapter outline to the introduction module
  @if map-get($Config_PartType_Chapter, outlineTitle) {
    @include compose_moveChapterOutline();
  }

  //After: createChapterComposites

  // Count exercises that were marked as moveTo: $AREA_EOC
  @include validate_enum(map-get($Config_PartType_Exercise, moveTo), $AREA__PREFIX__);
  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC {
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    $titleContent:  map-get($Config_PartType_Exercise, titleContent);
    @include validate_enum($resetAt, $RESET__PREFIX__);

    $resetSel: null;
    @if       $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }

    @include count_countEOCExercises(exercise, $resetSel);
    @include number_numberEOCExercises($titleContent, $titleContent);
  }

}
:pass(3) {
  //After: createChapterComposites, numberEOCExercises
  @include count_countExercises(exerciseAll);

  // Only link up problems and solutions if they will not be discarded (optimization)
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
  } @else {
    @include link_linkToProblemsFromSolutionsEOC();
  }

  //After: prepBookComposites
  @include reference_refChapterHeaderNodeAs(chapterHeaderNode);
  @include compose_prepChapterAreas($Config_BookCompositePages, chapterHeaderNode);

}
:pass(4) {
  //Only move solutions after exercises/solutions are numbered
  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);

  @each $page in $Config_ChapterCompositePages {
    $name: map-get($page, name);
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_type($name, string);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);

    @if $moveSolutionsTo == $AREA_EOC {
      @include compose_createEOCSolutions($Config_ChapterCompositePages, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_ChapterCompositePages, $page, sectionHeaderNode);
    }
  }

  // Copy/pasta from above
  // TODO: Combine bookCompositePages and chapterCompositePages in the config and then split them out in this file
  @each $page in $Config_BookCompositePages {
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);

    @if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_ChapterCompositePages, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOC {
      @error "BUG: For now this item should have been in chapterCompositePages but it was in bookCompositePages";
    }
  }

  //After: prepBookComposites, prepChapterAreas
  @include compose_createBookComposites($Config_BookCompositePages);
}
:pass(5) {
  //After: prepIndexTerms, createBookComposites
  @include modify_addIndexSymbolGroup("index", $SymbolsSectionTitle);

  //After: composite page creation
  @include count_countChapters(chapter);
  @include count_countAppendices(appendix);
  // @include count_countEOCExercises(exercise, '[data-type="chapter"]');
  // TODO: Find out why this recounting is necessary; it seems to be for the targetLabels
  // This is mostly copy/pasta from above
  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC {
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    @include validate_enum($resetAt, $RESET__PREFIX__);

    $resetSel: null;
    @if       $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }

    @include count_countEOCExercises(exercise, $resetSel);
  }

  @include count_countExamples(example);
  @include link_setTargetLabels($Config_TargetLabels);
  @include link_setLinkLabels();

  // Number equations if they have a titleContent
  // @include validate_enum(map-get($Config_PartType_Equation, moveTo), $AREA__PREFIX__);
  $titleContent               : map-get($Config_PartType_Equation, titleContent);
  $excludeNumberingInClassName: map-get($Config_PartType_Equation, excludeNumberingInClassName);
  $numberAt                   : map-get($Config_PartType_Equation, numberAt);
  @if $titleContent {
    @include validate_type($excludeNumberingInClassName, string);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @if $numberAt == $NUMBER_AFTER_MOVE {
      @include count_countEquations(equation);
      @include number_equations($titleContent, $excludeNumberingInClassName);
    }
  }

  @include reference_refBookMetadataNodeAs(bookMetadata);
  @include modify_compositeMetadata(bookMetadata);

  //After: createChapterComposites, createEOCSolutions, createBookComposites
  @include compose_titleEOCComposites($Config_ChapterCompositePages);
  @include compose_titleEOBComposites($Config_BookCompositePages);

  //After: createChapterComposites, createEOCSolutions, createBookComposites
  @include modify_compositeAutoID();
  @include modify_chapterAutoID();

  @include count_countTables(table);
  @include count_countFigures(figure);
  @include number_setCaptions($Config_SetTableCaption, $Config_CaptionTableNumber, $Config_CaptionTableNumberAp);
  @include number_setCaptions($Config_SetFigureCaption, $Config_CaptionFigNumber, $Config_CaptionFigNumberAp);

  @include modify_retitleHeaders(); // Update the h2 h3 ... levels to make sense
}
:pass(6) {
  //No Answer Key, make sure that solutions that are still present in the content are discarded
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
    @include modify_trash('.os-eoc [data-type="solution"]');
  }

  @include modify_trash('.os-index-link-separator:last-child');

  @include modify_retitleCompositeMetadata();
}
:pass(7) {
  //After: All metadata tasks are completed
  @include modify_suppressURI();

  @include toc_prepTOCElements();
}
:pass(8) {
  @include toc_putTOCElements();
}
:pass(9) {
  @include toc_navTOCUnwrap();
}
:pass(100) {
  @include utils_clearTrash();
}
