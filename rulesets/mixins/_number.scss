@import "./utils";

@mixin number_numberChapters($chapterTitleContent) {
  div[data-type="chapter"] {
    @include utils_title($chapterTitleContent, bChapterLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bChapterLabel) content();
    }
  }
}

@mixin number_numberAppendices($appendixTitleContent) {
  div.appendix {
    @include utils_title($appendixTitleContent, bAppendixLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bAppendixLabel) content();
    }
  }
}

@mixin number_numberSections($sectionTitleContent) {
  div[data-type="chapter"] > div[data-type="page"] {
    &:not(.introduction) {
      @include utils_title($sectionTitleContent, bSectionLabel);
      //use the title mixin for this? and that way content() can be wrapped
      > [data-type="document-title"] {
        container: h2;
        content: pending(bSectionLabel) content();
      }
    }
    &.introduction {
      > [data-type="document-title"] {
        container: h2;
      }
    }
  }
}

//EOC composite pages must be created before this runs
@mixin number_numberEOCExercises($exerciseTitleContent, $solutionTitleContent) {
  .os-eoc [data-type="exercise"] {
    [data-type="problem"] {
      @include utils_title($exerciseTitleContent);
    }
    [data-type="solution"] {
      @include utils_title($exerciseTitleContent);
    }
  }
}

@mixin number_numberExamples($exampleTitleContent, $solutionTitleContent) {
  .example {
    @include utils_title($exampleTitleContent, bExampleLabel);
    > [data-type="title"] {
      //BAD: there should not be titling content creation outside the book level. This should get moved
      $exampleTitle: (
        text: content()
      );
      @include utils_title($exampleTitle, bExampleLabel);
      move-to: trash;
    }
    &::after {
      container: div;
      content: pending(bExampleLabel);
      class: "os-title";
      move-to: bExampleHeader;
    }
    &:deferred {
      content: pending(bExampleHeader) content();
    }
    [data-type="solution"] {
      @include utils_title($solutionTitleContent, null, div, "solution-title");
    }
  }
}

@mixin number_numberNote($type, $noteContent) {
  [data-type="note"].#{$type} {
    @include utils_title($noteContent, bNoteLabel-#{$type});
    > [data-type="title"] {
      //TODO: May want to have the option to preserve titles similarly to examples in the future.
      move-to: trash;
    }
    &::after {
      container: div;
      content: pending(bNoteLabel-#{$type});
      class: "os-title";
      move-to: bNoteHeader;
    }
    &:deferred {
      content: pending(bNoteHeader) content();
    }
    //TODO: Maybe want to have the option to handle solutions similarly to examples in the future
  }
}

@mixin number_setCaptions($setFigTableCaptions, $labeling, $labelingAp) {
  $type:                map-get($setFigTableCaptions, type);
  $defaultContainer:    map-get($setFigTableCaptions, defaultContainer);
  $hasCaption:          map-get($setFigTableCaptions, hasCaption);
  $hasTitle:            map-get($setFigTableCaptions, hasTitle);
  $exceptionClassNames: map-get($setFigTableCaptions, exceptionClassNames);

  // $noTitleContent: (); // For the exceptions, this is the "titleContent" that will be used

  @include validate_typeOptional($exceptionClassNames, list);
  // These selectors are of the form:
  // `table:not(.unnumbered):not(.custom1):not(.custom2)` (everything that is not an exception)
  // `table.unnumbered, table.custom1, table.custom2`     (everything that is an exception)
  $notAnExceptionSelector: "#{$type}";
  $exceptionsSelector: "";
  @if $exceptionClassNames {
    @each $item in $exceptionClassNames {
      @include validate_type($item, string);
      $notAnExceptionSelector: unquote("#{$notAnExceptionSelector}:not(.#{$item})");
      // Only add a comma if there is already an $exceptionsSelector
      @if $exceptionsSelector == "" {
        $exceptionsSelector: unquote("#{$type}.#{$item}");
      } @else {
        $exceptionsSelector: unquote("#{$exceptionsSelector}, #{$type}.#{$item}");
      }

    }
  }

  // /* The :not(#{$type}) is here because of subfigures (I think) */
  [data-type="chapter"],
  [data-type="chapter"] :not(#{$type}) {
    > {
      #{$notAnExceptionSelector} {

        // If the figure/table has a caption/title then set a boolean
        // (essentially, implement `:has(caption)`)
        // hmm, this may not be possible in 1 pass

        @include utils_title($labeling, bCaption);
        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
      }
      // A bug in easybake does not allow 2 selectors with `::outside` to match an element.
      // in hs-physics the `.key-terms` table is also marked as `.unnumbered`
      // see https://github.com/Connexions/cnx-easybake/issues/48
      //
      // TODO: Maybe these selectors can be simplified to just always call setCaptionsHelper
      @if $exceptionsSelector != "" {
        #{$exceptionsSelector} {
          // @include utils_title($noTitleContent, bCaption);
          @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
        }
      }
      #{$notAnExceptionSelector}.unnumbered {
        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
      }
    }
    @include trashUnnumberedCaption($type, $defaultContainer);
    // TODO: uncomment me but it will cause minor regressions in existing books: @include trashEmptyCaption($type, $defaultContainer);
  }

  .appendix,
  .appendix :not(#{$type}) {
    > {
      #{$notAnExceptionSelector} {
        @include utils_title($labelingAp, bCaption);
        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
      }
      // A bug in easybake does not allow 2 selectors with `::outside` to match an element.
      // in hs-physics the `.key-terms` table is also marked as `.unnumbered`
      // see https://github.com/Connexions/cnx-easybake/issues/48
      //
      // TODO: Maybe these selectors can be simplified to just always call setCaptionsHelper
      @if $exceptionsSelector != "" {
        #{$exceptionsSelector} {
          // @include utils_title($noTitleContent, bCaption);
          @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
        }
      }
      #{$notAnExceptionSelector}.unnumbered {
        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
      }
    }
    @include trashUnnumberedCaption($type, $defaultContainer);
    // TODO: uncomment me but it will cause minor regressions in existing books: @include trashEmptyCaption($type, $defaultContainer);
  }
}


@mixin trashEmptyCaption ($type, $defaultContainer) {
  > #{$type} {
    #{$defaultContainer}:empty {
      move-to: trash;
    }
  }
}

/// Unnumbered captions are currently trashed (even if they contain content) because
/// of some contract that the XML teams had which stated something along the lines
/// of "If a table/figure is unnumbered then openstax will discard the caption"
@mixin trashUnnumberedCaption ($type, $defaultContainer) {
  > #{$type}.unnumbered {
    #{$defaultContainer} {
      move-to: trash;
    }
  }
}

@mixin setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle) {

  @if ($hasCaption) {
    #{$defaultContainer} {
      container: span;
      class: "os-caption";
      move-to: bCaption;
    }
  }
  @if ($hasTitle) {
    @if ($type == "table") {
      #{$defaultContainer} [data-type="title"] {
        container: span;
        class: "os-title";
        move-to: bCaption;
      }
    }
    @if ($type == "figure") {
      [data-type="title"] {
        container: span;
        class: "os-title";
        move-to: bCaption;
      }
    }
  }
  &::after {
    container: div;
    class: "os-caption-container";
    content: pending(bCaption);
    move-to: bCaptionContainer;
  }
  &::outside {
    class: os-#{$type};
    container: div;
    content: content() pending(bCaptionContainer);
  }
}

@mixin number_equations ($numberedEquation, $sectionSummary) {
  section:not(.#{$sectionSummary}) [data-type="equation"]:not(.unnumbered) {
    @include utils_title($numberedEquation);
  }
}
