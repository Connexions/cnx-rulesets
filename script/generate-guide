#!/bin/bash
cd "$(dirname "$0")/.." || exit 111
source ./script/bootstrap || exit 111

recipe_name=$1
baked_or_prepared_suffix=$2 # Overridden when running ./diff-guide-prepare

sassDir='./recipes/'
styleguideDir="./styleguide/${recipe_name}"
sass_file="${sassDir}/books/${recipe_name}/book.scss"
css_file="${styleguideDir}/guide.css"
guideHomepageFile="./guide-homepage.md" # Relative to ${sassDir}/recipes/

tempDir="./tmp/"
tempRecipeDir="${tempDir}/${recipe_name}/"
bookDocumentationDir="./recipes/books/${recipe_name}"
kssOutputFile="${tempDir}/kss-output.txt"

sass_bin="$(npm bin)/node-sass"

# Check command line args

[[ "${recipe_name}" ]] || die 'Argument Missing. You must specify the name of the book as the 1st argument. For example: physics'

if [[ -z "${baked_or_prepared_suffix}" ]]; then
  baked_or_prepared_suffix="baked"
else
  _say "INFO: Generating -${baked_or_prepared_suffix}.xhtml files instead of -baked.xhtml files"
fi


[[ -e ${styleguideDir} ]] || mkdir -p "${styleguideDir}" || exit 111

do_progress_quiet "Compiling the guide.scss file for ${recipe_name}" \
  "${sass_bin}" --source-map true "${sass_file}" "${css_file}"


progress "Generating the baked example HTML files"

# Create a temporary directory which contains the recipes/mixins/ and recipes/${recipe_name} directories.
# This is because we want the styleguide to contain docs of all the common/ elements
# and the book-specific elements, and kss only allows you to point to 1 directory
# to look at all the SASS files.
[[ -d "${tempDir}" ]] || mkdir "${tempDir}" || exit 111

# Keep the tempRecipeDir around because it could have been created by diff-guide-prepare
[[ -d "${tempRecipeDir}" ]] || mkdir "${tempRecipeDir}" || exit 111


# Copy over all the dirs containing the styleguide comments that need to be included

# Pull in the BOOK_CONFIGS
source ./books.txt || exit 111

# Filter BOOK_CONFIGS to only contain the book you want to fetch
for book_config in "${BOOK_CONFIGS[@]}"; do
  read -r _ recipeConfigName _ _ basedOns <<< "${book_config}"

  if [[ "${recipe_name}" = "${recipeConfigName}" ]]; then
    # Actually copy the directories over (like common/,books/physics/)
    IFS=',' read -ra basedOnDirs <<< "$basedOns"
    for basedOnDirName in "${basedOnDirs[@]}"; do
      do_progress_quiet "Including ${sassDir}/${basedOnDirName}" \
        cp -R "${sassDir}/${basedOnDirName}" "${tempRecipeDir}/$(basename "${basedOnDirName}")"
    done
    found_config=1
    break
  fi
done

[[ 1 -eq "${found_config}" ]] || die "Could not find Book info for book named ${recipe_name}. check ./books.txt"

cp -R "${bookDocumentationDir}" "${tempRecipeDir}" || exit 111


# Find all the styleguide html files and convert them
while IFS= read -r -d '' snippet_file_name; do # generic for loop

  snippetBase="$(dirname "${snippet_file_name}")/$(basename "${snippet_file_name}" .snippet.xml)"
  raw_file_name="${snippetBase}.raw.xhtml"
  # This is the filename in the CSS comment
  destFileName="${snippetBase}.xhtml-${baked_or_prepared_suffix}.html"

  # Convert the snippet (which is HTML + CNXML) into just HTML
  xsltproc ./script/xsl/_cnxml-to-xhtml.xsl "${snippet_file_name}" > "${raw_file_name}" || exit 111

  # commented because xmllint does not like html5 element names like <figure>
  # ./script/bake-file ${recipe_name} ${snippet_file_name} /dev/stdout | xmllint --html --format - > ${snippet_file_name}-baked.xhtml
  # use `source` so we do not have to re-initialize python/node/ruby
  do_progress_quiet "Baking ${raw_file_name}" \
    source ./script/bake-file "${recipe_name}" "${raw_file_name}" "${raw_file_name}-temp1-${baked_or_prepared_suffix}.xhtml" --use-repeatable-ids

  # Construct an HTML file that contains both the raw and baked HTML
  # so it can be separated in the browser
  # (and so Phil does not have to completely rewrite kss becuase it assumes only 1 file for markup)
  echo '<section class="-kss-autogen-guide-markup" data-kss-format="cnxml">' > "${destFileName}" || exit 111
  cat "${snippet_file_name}" >> "${destFileName}" || exit 111
  echo '</section>' >> "${destFileName}" || exit 111
  echo '<section class="-kss-autogen-guide-markup" data-kss-format="html-raw">' >> "${destFileName}" || exit 111
  cat "${raw_file_name}" >> "${destFileName}" || exit 111
  echo '</section>' >> "${destFileName}" || exit 111
  echo '<section class="-kss-autogen-guide-markup" data-kss-format="html-baked">' >> "${destFileName}" || exit 111
  cat "${raw_file_name}-temp1-${baked_or_prepared_suffix}.xhtml" >> "${destFileName}" || exit 111
  echo '</section>' >> "${destFileName}" || exit 111

  rm "${raw_file_name}-temp1-${baked_or_prepared_suffix}.xhtml" || exit 111
done <   <(find "${tempRecipeDir}" -name "*.snippet.xml" -print0)


if [[ "${baked_or_prepared_suffix}" == "baked" ]]; then

  # The CSS path is relative to the styleguide directory, hence `./guide.css`
  # Exclude parsing the output/*.css files by setting the --mask
  do_progress_quiet "Generating the style guide" \
    "$(npm bin)/kss-node" --verbose \
    --template ./js/openstax-kss-builder \
    --homepage "${guideHomepageFile}" \
    --destination "${styleguideDir}" \
    --css ./guide.css \
    --source "${tempRecipeDir}" \
    --mask '*.less|*.sass|*.scss|*.styl|*.stylus' > "${kssOutputFile}"

  # HACK: KSS-node does not error if an HTML file is missing. Instead, it prints out a warning.
  # So, check the output of kss to see if any errors were reported.
  missingFiles="$(grep 'NOT FOUND!' < ${kssOutputFile} )"
  if [[ -n "${missingFiles}" ]]; then
    die "Some HTML files were missing: ${missingFiles}. Check ${kssOutputFile} for more details"
  fi

  # Generate an HTML report (if genhtml is installed)
  if [[ -n "$(command -v genhtml)" ]]; then
    coverage_files=$(find "${tempRecipeDir}" -name '*.lcov')
    # shellcheck disable=SC2086
    do_progress_quiet "Generating HTML coverage report" \
      genhtml --quiet --output ./coverage/ ${coverage_files}
  fi

  _say "Guide is available at ${styleguideDir}/index.html . You can open it in a browser"

else
  _say "INFO: Skipping actual styleguide generation because the additional arg '${baked_or_prepared_suffix}' was provided (probably for diff-guide-prepare)"
fi
