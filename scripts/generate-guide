#!/bin/bash

rulesetName=$1
bakedOrPreparedSuffix=$2 # Overridden when running ./diff-guide-prepare

sassDir='./rulesets/'
styleguideDir="./styleguide/${rulesetName}"
sassFile="${sassDir}/books/${rulesetName}/book.scss"
cssFile="${styleguideDir}/guide.css"
bookCssFile="${sassDir}/output/${rulesetName}.css"
guideHomepageFile="./guide-homepage.md" # Relative to ${sassDir}/rulesets/

tempDir="./tmp/"
tempRulesetDir="${tempDir}/${rulesetName}/"
bookDocumentationDir="./rulesets/books/${rulesetName}"
kssOutputFile="${tempDir}/kss-output.txt"

# Check command line args

if [ -z "${rulesetName}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument. For example: physics'
  exit 1
fi

if [ -z "${bakedOrPreparedSuffix}" ]
then
  bakedOrPreparedSuffix="baked"
else
  >&2 echo "INFO: Generating -${bakedOrPreparedSuffix}.xhtml files instead of -baked.xhtml files"
fi

# Initialize rbenv (if installed)
[[ -n $(which rbenv) ]] && eval "$(rbenv init -)"


>&2 echo "==> Compiling the guide.scss file for ${rulesetName}"
if [ ! -e ${styleguideDir} ]
then
  mkdir -p ${styleguideDir} || exit 1
fi
bundle exec sass ${sassFile} ${cssFile} || exit 1
bundle exec sass ${sassFile} ${bookCssFile} || exit 1


>&2 echo "==> Generating the baked example HTML files"

# Create a temporary directory which contains the rulesets/mixins/ and rulesets/${rulesetName} directories.
# This is because we want the styleguide to contain docs of all the common/ elements
# and the book-specific elements, and kss only allows you to point to 1 directory
# to look at all the SASS files.
if [[ ! -d "${tempDir}" ]]
then
  mkdir "${tempDir}" || exit 1
# Commented so we keep the directory because the lcov files are useful
# else
#   rm -rf "${tempDir}" || exit 1
fi

# Keep the tempRulesetDir around because it could have been created by diff-guide-prepare
if [[ ! -d "${tempRulesetDir}" ]]
then
  mkdir "${tempRulesetDir}" || exit 1
# else
#   # rm -rf "${tempRulesetDir}" || exit 1
fi


# Copy over all the dirs containing the styleguide comments that need to be included

# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

# Filter BOOK_CONFIGS to only contain the book you want to fetch
for bookConfig in "${BOOK_CONFIGS[@]}"
do
  read -r bookConfigName rulesetConfigName uuid hostName basedOns <<< "${bookConfig}"

  if [[ "${rulesetName}" = "${rulesetConfigName}" ]]
  then
    # Actually copy the directories over (like common/,books/physics/)
    IFS=',' read -ra basedOnDirs <<< "$basedOns"
    for basedOnDirName in "${basedOnDirs[@]}"; do
      echo "==> Including ${sassDir}/${basedOnDirName}"
      cp -R "${sassDir}/${basedOnDirName}" "${tempRulesetDir}/$(basename ${basedOnDirName})" || exit 1
    done
    foundConfig=1
    break
  fi
done

if [[ ! 1 -eq "${foundConfig}" ]]
then
  >&2 echo "ERROR: Could not find Book info for book named ${rulesetName}"
  >&2 echo "check ./books.txt"
  exit 1
fi

cp -R "${bookDocumentationDir}" "${tempRulesetDir}" || exit 1


# Find all the styleguide html files and convert them
for snippetFileName in $(find "${tempRulesetDir}" -name "*.xhtml")
do

  if [[ ! "${snippetFileName}" =~ "-baked.xhtml" ]]
  then
    if [[ ! "${snippetFileName}" =~ "-prepared.xhtml" ]]
    then

      >&2 echo "Generating temporary ${snippetFileName}-${bakedOrPreparedSuffix}.html"
      # commented because xmllint does not like html5 element names like <figure>
      # ./scripts/bake-file ${rulesetName} ${snippetFileName} /dev/stdout | xmllint --html --format - > ${snippetFileName}-baked.xhtml
      ./scripts/bake-file ${rulesetName} ${snippetFileName} ${snippetFileName}-temp1-${bakedOrPreparedSuffix}.xhtml --use-repeatable-ids  || exit 1

      # Construct an HTML file that contains both the raw and baked HTML
      # so it can be separated in the browser
      # (and so Phil does not have to completely rewrite kss becuase it assumes only 1 file for markup)
      echo '<section class="-kss-autogen-guide-markup" data-kss-format="html-raw">' > ${snippetFileName}-${bakedOrPreparedSuffix}.html || exit 1
      cat ${snippetFileName} >> ${snippetFileName}-${bakedOrPreparedSuffix}.html || exit 1
      echo '</section>' >> ${snippetFileName}-${bakedOrPreparedSuffix}.html || exit 1
      echo '<section class="-kss-autogen-guide-markup" data-kss-format="html-baked">' >> ${snippetFileName}-${bakedOrPreparedSuffix}.html || exit 1
      cat ${snippetFileName}-temp1-${bakedOrPreparedSuffix}.xhtml >> ${snippetFileName}-${bakedOrPreparedSuffix}.html || exit 1
      echo '</section>' >> ${snippetFileName}-${bakedOrPreparedSuffix}.html || exit 1

      rm ${snippetFileName}-temp1-${bakedOrPreparedSuffix}.xhtml || exit 1
    fi
  fi
done


if [[ "${bakedOrPreparedSuffix}" == "baked" ]]
then

  >&2 echo "==> Generating the style guide"
  # The CSS path is relative to the styleguide directory, hence `./guide.css`
  # Exclude parsing the output/*.css files by setting the --mask
  $(npm bin)/kss-node --template ./js/openstax-kss-builder --verbose --homepage ${guideHomepageFile} --destination ${styleguideDir} --css ./guide.css --source ${tempRulesetDir} --mask '*.less|*.sass|*.scss|*.styl|*.stylus' > "${kssOutputFile}"  || exit 1

  # Delete the temp files created above
  # >&2 echo "==> Deleting the baked example HTML files"
  # for snippetFileName in $(find ./rulesets/books/ -name "*-${bakedOrPreparedSuffix}.xhtml")
  # do
  #   # echo "Removing temporary ${snippetFileName}"
  #   rm ${snippetFileName} || exit 1
  # done

  # HACK: KSS-node does not error if an HTML file is missing. Instead, it prints out a warning.
  # So, check the output of kss to see if any errors were reported.
  missingFiles=$(cat "${kssOutputFile}" | grep 'NOT FOUND!' )
  if [ -n "${missingFiles}" ]
  then
    >&2 echo "ERROR: Some HTML files were missing:"
    >&2 echo "${missingFiles}"
    >&2 echo "Check ${kssOutputFile} for more details"
    exit 1
  fi

  # Generate an HTML report (if genhtml is installed)
  if [[ -n "$(which genhtml)" ]]
  then
    genhtml --quiet --output ./coverage/ $(find "${tempRulesetDir}" -name "*.lcov")
  fi

  >&2 echo "Guide is available at ${styleguideDir} . You can open it in a browser"

else
  >&2 echo "INFO: Skipping actual styleguide generation because the additional arg '${bakedOrPreparedSuffix}' was provided (probably for diff-guide-prepare)"
fi
