#!/bin/bash
set -e


arg1=$1
debugFlag1=$2
debugFlag2=$3
debugFlag3=$4
debugFlag4=$5

# Check command line args

if [ -z "${arg1}" ]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument (or --all). For example: physics'
  >&2 echo "You can specify additional commandline arguments like -d to this script if you want more debugging"
  exit 1
fi


# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

if [ ! "${arg1}" == "--all" ]
then
  # Filter BOOK_CONFIGS to only contain the book you want to fetch
  for bookConfig in "${BOOK_CONFIGS[@]}"
  do
    read -r bookConfigName rulesetName uuid _ <<< "${bookConfig}"

    if [[ "${arg1}" = "${bookConfigName}" ]]
    then
      BOOK_CONFIGS=("${bookConfigName} ${rulesetName} ${uuid}")
      foundConfig=1
      break
    fi
  done

  if [[ ! 1 -eq "${foundConfig}" ]]
  then
    >&2 echo "ERROR: Could not find Book info for book named ${arg1}"
    >&2 echo "Valid books are (from ./books.txt):"
    for bookConfig in "${BOOK_CONFIGS[@]}"
    do
      read -r bookName rulesetName uuid _ <<< "${bookConfig}"
      >&2 echo "${bookName}"
    done
    exit 1
  fi
fi


for bookConfig in "${BOOK_CONFIGS[@]}"
do
  read -r bookName rulesetName uuid _ <<< "${bookConfig}"

  ./scripts/compile-books ${rulesetName} || exit 1

  rawFile="./data/${bookName}-raw.xhtml"
  bakedFile="./data/${bookName}-baked.xhtml"
  sassFile="./rulesets/books/${rulesetName}/book.scss"
  cssFile="./rulesets/output/${rulesetName}.css"

  if [ ! -f "${rawFile}" ]
  then
    >&2 echo 'ERROR: Could not find the raw HTML file. Have you run fetch-html yet?'
    exit 1
  fi

  if [ ! -f "${sassFile}" ]
  then
    >&2 echo "ERROR: Could not find the raw SCSS file at ${sassFile}"
    exit 1
  fi


  >&2 echo "==> Baking ${rawFile} using ${rulesetName} (may take a few minutes)"

  # Remove the baked file if it exists
  [ -e "${bakedFile}" ] && rm ${bakedFile}

  # Activate the venv if not already in a virtualenv
  if [[ -z "${VIRTUAL_ENV}" ]]
  then
    source ./venv/bin/activate
  fi

  lcovFile="${rawFile}.lcov"

  cnx-easybake --coverage-file "${lcovFile}" ${debugFlag1} ${debugFlag2} ${debugFlag3} ${debugFlag4} "${cssFile}" "${rawFile}" "${bakedFile}"

  # Generate an HTML report (if genhtml is installed)
  if [[ -n "$(which genhtml)" ]]
  then
    >&2 echo "==> Generating HTML coverage report at ./coverage/"
    genhtml --quiet --output ./coverage/ "${lcovFile}"
  fi

  # Validate the cooked file
  >&2 echo "==> Validating ${bakedFile}"
  cnx-epub-validate-collated ${bakedFile}
done
