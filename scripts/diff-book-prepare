#!/bin/bash


arg1=$1
debugFlag=$2

# Pull in the BOOK_CONFIGS
source ./books.txt || exit 1

# Check command line args

if [[ -z "${arg1}" ]]
then
  >&2 echo 'ERROR: Argument Missing. You must specify the name of the book as the 1st argument'
  >&2 echo ' or --all for all books.'
  >&2 echo 'This script prepares the book to compare against.'
  >&2 echo 'Typically this step is done in the master branch'
  >&2 echo 'and then in another branch diff-book is called to see how the HTML changed.'
  >&2 echo ''
  >&2 echo "Valid books are (from ./books.txt):"
  for bookConfig in "${BOOK_CONFIGS[@]}"
  do
    read -r bookName rulesetName uuid _ <<< "${bookConfig}"
    >&2 echo "${bookName}"
  done
  exit 1
fi


if [[ ! "${arg1}" == "--all" ]]
then
  # Filter BOOK_CONFIGS to only contain the book you want to fetch
  for bookConfig in "${BOOK_CONFIGS[@]}"
  do
    read -r bookConfigName rulesetName uuid _ <<< "${bookConfig}"

    if [[ "${arg1}" = "${bookConfigName}" ]]
    then
      BOOK_CONFIGS=("${bookConfigName} ${rulesetName} ${uuid}")
      foundConfig=1
      break
    fi
  done

  if [[ ! 1 -eq "${foundConfig}" ]]
  then
    >&2 echo "ERROR: Could not find Book info for book named ${arg1}"
    >&2 echo "Valid books are (from ./books.txt):"
    for bookConfig in "${BOOK_CONFIGS[@]}"
    do
      read -r bookName rulesetName uuid _ <<< "${bookConfig}"
      >&2 echo "${bookName}"
    done
    exit 1
  fi
fi

for bookConfig in "${BOOK_CONFIGS[@]}"
do
  read -r bookName rulesetName uuid _ <<< "${bookConfig}"
  rawFile="./data/${bookName}-raw.xhtml"

  bakedFile="./data/${bookName}-baked.xhtml"
  preparedFile="./data/${bookName}-prepared.xhtml"

  ./scripts/bake-book ${bookName} --use-repeatable-ids || exit 1

  mv ${bakedFile} ${preparedFile}
done
