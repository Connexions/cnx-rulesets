/*==========================================================
  STATISTICS PAGES
==========================================================*/

//Make pages
$pageKeyTerms: (
  name: "Key Terms",
  source: "glossary",
  isGlossary: true,
  sortBy: "dl > dt"
);

$pageChapterReview: (
  name: "Chapter Review",
  source: "summary",
  sectionSeparated: true
);

$pageFormulaReview: (
  name: "Formula Review",
  source: "formula-review",
  sectionSeparated: true
);

/*
  Practice Problems

  These should be collated at the end of a chapter.

  Markup: ./examples/book.composite.practice.html-cooked.html

  Style guide: book.composite.practice
*/
$pagePractice: (
  name: "Practice",
  source: "practice",
  sectionSeparated: true,
  hasSolutions: true
);

$pageBITExercises: (
  name: "Bringing It Together: Exercises",
  source: "bring-together-exercises",
  hasSolutions: true
);

$pageHomework: (
  name: "Homework",
  source: "free-response",
  sectionSeparated: true,
  hasSolutions: true
);

$pageBITHomework: (
  name: "Bringing It Together: Homework",
  source: "bring-together-homework",
  hasSolutions: true
);

$pageReferences: (
  name: "References",
  source: "references",
  sectionSeparated: true
);

$pageSolutions: (
  name: "Solutions",
  source: "solutions",
  compoundComposite: true,
);

$pageIndex: (
  name: "Index",
  source: "index",
  isIndex: true
);

$chapterCompositePages: (
  $pageKeyTerms,
  $pageChapterReview,
  $pageFormulaReview,
  $pagePractice,
  $pageBITExercises,
  $pageHomework,
  $pageBITHomework,
  $pageReferences,
  $pageSolutions
);

$bookCompositePages: (
  //This doesn't get parsed as a list without a comma at the end
  //the composite builder should account for this rather than using hacky syntax
  $pageIndex,
);

/*==========================================================
  STATISTICS TITLING CONTENT
==========================================================*/

//unfortunately a base obj cannot be created for all Content because it would make the order of the keys static
//when they need to be able to be in any order because of possible changes in titling order between books
//Usage Note: key: class of the containing span, value: text that will go inside span
$chapterTitleContent: (
  title-label: "Chapter ",
  number: counter(chapter),
  divider: " | "
);

$appendixTitleContent: (
  title-label: "Appendix ",
  number: counter(appendix, upper-alpha),
  divider: " : "
);

$sectionTitleContent: (
  number: counter(chapter) "." counter(section),
  divider: " | "
);

$exerciseTitleContent: (
  number: counter(exercise)
);

$exampleTitleContent: (
  title-label: "Example ",
  number: counter(chapter) "." counter(example)
);

$exampleSolutionTitleContent: (
  title-label: "Solution ",
  number: counter(chapter) "." counter(example)
);

$tryTitleContent: (
  title-label: "Try It ",
  number: counter(chapter) "." counter(example)
);

$calcTitleContent: (
  title-label: "Using the TI-83, 83+, 84, 84+ Calculator"
);

$captionTableNumber: (
  title-label: "Table ",
  number: counter(chapter) "." counter(table)
);

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionTableNumberAp: (
  title-label: "Table ",
  number: counter(appendix, upper-alpha) "." counter(table)
);

$captionFigNumber: (
  title-label: "Figure ",
  number: counter(chapter) "." counter(figure)
);

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionFigNumberAp: (
  title-label: "Figure ",
  number: counter(appendix, upper-alpha) "." counter(figure)
);

$symbolsSectionTitle: "Symbols";

/*==========================================================
  STATISTICS CONFIG
==========================================================*/

$setTableCaption: (
  type: table,
  defaultContainer: caption,
  hasCaption: false,
  hasTitle: true
);

$setFigureCaption: (
  type: figure,
  defaultContainer: figcaption,
  hasCaption: true,
  hasTitle: false
);

//If this method of setting the content of the label explicity becomes a problem,
//try grabbing the numbering information from the element's header

//NOTE: These selectors MUST match the counting selectors or be more specific
//otherwise, the increment and the counter() call may fire in the wrong order
//This may be fixed in a later version of easybake
$targetLabels: (
  (
    selector: '.os-eoc [data-type="exercise"]',
    label: "Exercise " counter(chapter) "." counter(exercise)
  ),
  (
    selector: 'div[data-type="chapter"] .example',
    label: "Example " counter(chapter) "." counter(example)
  ),
  (
    selector: 'div[data-type="chapter"] .try',
    label: "Try It"
  ),
  (
    selector: '[data-type="chapter"] :not(table) > table',
    label: "Table " counter(chapter) "." counter(table)
  ),
  (
    selector: '[data-type="chapter"] :not(figure) > figure',
    label: "Figure " counter(chapter) "." counter(figure)
  ),
  (
    selector: '[data-type="appendix"] :not(table) > table',
    label: "Table " counter(appendix, upper-alpha) "." counter(table)
  ),
  (
    selector: '[data-type="appendix"] :not(figure) > figure',
    label: "Table " counter(appendix, upper-alpha) "." counter(figure)
  )
);

/*
  Chapter Objectives

  This is a Note that appears in the Introduction page of every chapter.

  Markup: ./examples/page.note.chapter-objectives.html-cooked.html

  Style guide: page.note.chapter-objectives
*/
