// .\=(@counters) {
//   counter-reset: @counters;
// }
// .\+(@counters) {
//   counter-increment: @counters;
// }

// div[data-type='book']{
//   .\=(chapter);
// }

// div[data-type='chapter'] {
//   .\=(section figure table list);
//   .\+(chapter);

//   div[data-type="page"] {
//     .\=(subsection);
//     .\+(section);
//   }
//   .eoc-exercises {
//     .\=(exercise);
//   }
//   div[data-type='exercise'] {
//     .\+(exercise);
//   }
//   // <div data-type="document-title">Stuff</div>
//   // becomes
//   // <div data-type="document-title"><span class="titling">1</span><span class="titling">Stuff</span></div>
//   > div[data-type='document-title'] {
//     string-set: chapter-title content();
//     content: '';

//     &::span {
//       class: 'titling';
//       content: counter(chapter);
//     }
//     &::span {
//       class: 'titling';
//       content: string(chapter-title);
//     }
//   }

//   div[data-type="page"] {
//     .\=(subsection);
//     .\+(section);

//     > div[data-type='document-title'] {
//       string-set: section-title content();
//       content: '';

//       &::span {
//         class: 'titling';
//         content: counter(chapter) '.' counter(section);
//       }
//       &::span {
//         class: 'titling';
//         content: string(section-title);
//       }
//     }
//     > section {
//         .\+(subsection);
//     }
//   }

//   .eoc-section-summary > section h1.title {
//     string-set: section-title content();
//     content: '';

//     &::span {
//       class: 'titling';
//       // This implies that group-by stores a "xref" attribute
//       // with a cross reference, eg #id-5352435.
//       // These are an INTERNAL cross reference, they are not baked in
//       // to the cooked document as attributes.
//       content: target-counter(attr(xref), chapter) '.' target-counter(attr(xref), section);
//     }
//     &::span {
//       class: 'titling';
//       content: string(section-title);
//     }
//   }
//   .eoc-exercises div[data-type='problem']::before {
//     content: 'Exercise ' counter(exercise);
//   }
// }


// .x-numb () {
//   .\=(exercise);

//   > section h1.title {
//     string-set: section-title content();
//     content: '';

//     &::span {
//       class: 'titling';
//       content: target-counter(attr(xhref), chapter) '.' target-counter(attr(xref), section);
//     }
//     &::span {
//       class: 'titling';
//       content: string(section-title);
//     }
//   }

//   div[data-type='exercise'] {
//   //  .\+(exercise);
//   }
//   div[data-type='problem'] {
//     &::before {
//       content: counter(exercise) '.';
//       // If you needed to, you could also do this with
//       // the internal cross references and target-counter
//       // instead of "recounting" them here. Sometimes it's
//       // basic and this "easy" way is fine, sometimes it isn't...
//     }
//   }
// }
body {
  counter-reset: chapter;
  div[data-type="chapter"] {
    pass: @pass-20-numbering-eoc;
    counter-reset: exercises;
  }
  div[data-type="chapter"] {
    counter-reset: section;
    counter-reset: example;
    counter-reset: lab;
    counter-increment: chapter;

    &::before {
      container: span;
      content: counter(chapter);
      move-to: chapterNumber;
    }
    &::before {
      content: "Chapter";
      container: span;
      move-to: chapterLabel;
    }
    &::before {
      content: " | ";
      container: span;
      move-to: chapterDivider;
    }
    > h1[data-type="document-title"] {
      container: h1;
      content: pending(chapterLabel) " " pending(chapterNumber) pending(chapterDivider) content() ;
    }
    > div[data-type="page"] {
      // counter-increment: lab;
      // counter-reset: lab;
      &:not(:first-of-type) {
        &::before {
          counter-increment: section;
          container: span;
          content: counter(chapter)"."counter(section);
          move-to: sectionNumber;
        }
        &::before {
          content: "section";
          container: span;
          move-to: sectionLabel;
        }
        &::before {
          content: " | ";
          container: span;
          move-to: sectionDivider;
        }
      }
      > [data-type="document-title"] {
        data-type: "document-title";
        container: div;
        content: pending(sectionNumber) " "pending(sectionDivider) content() ;
      }
    }
    [data-type="page"] {
      .example {
        counter-increment: example;

        &::before {
          content: counter(chapter)"."counter(example);
          container: span;
          move-to: exampleNumber;
        }
        >[data-type = 'title']{
          &::before{
            content: content();
            container: span;
            move-to: exampleTitle;
          }
          move-to: trash;
        }
        &::after{
          class: "example-title";
          container: h1;
          content: "Example " pending(exampleNumber) pending(exampleTitle);
          move-to: exampleTitletest;
        }
        &:deferred {
          content: pending(exampleTitletest) content();
        }
        //move me to collations
        [data-type="solution"] {
          &::before {
            container: div;
            data-type: title;
            content: "Solution " counter(chapter)"."counter(example);
          }
        }
      }
      .try {
        .exercise {
          &::before {
           class: "try-number";
           container: span;
           content: counter(chapter)"."counter(example);
         }
       }
     }
     .lab {
      &::before {
        content: "Stats Lab";
        class: "stat-lab-title";
        data-type: "title";
      }
      counter-increment: lab;
      >[data-type="title"] {
        &::before {
         content: counter(chapter)"."counter(lab);
         container: span;
         class: "lab-number";
         node-set: labNumber;
       }
     }
   }
 }
}



[data-type="chapter"] {
  pass: @pass-40-numbering-figs-tabs;
  counter-reset: figure;
  counter-reset: table;
  counter-increment: chapNum;
    [data-target="figure"] {
      content: "Fig." target-counter(attr(href), chapNum)"."target-counter(attr(href), figure);
      pass: @pass-40-numbering-figs-tabs;
    }
    [data-target="table"] {
      content: "Table" target-counter(attr(href), chapNum)"."target-counter(attr(href), figure);
      pass: @pass-40-numbering-figs-tabs;
    }
  :not(figure) > figure {
    counter-increment: figure;
    pass: @pass-40-numbering-figs-tabs;
    figcaption {
      container: div;
      class: caption;
      content: content();
      move-to: figCaption;
      pass: @pass-40-numbering-figs-tabs;
    }
    &::after {
      container: a;
      attr-href: myLinkId;
      content: "Fig." counter(chapNum)"."counter(figure);
      move-to: figureNumber;
      pass: @pass-40-numbering-figs-tabs;
    }
    &::after {
      class: "figure-number";
      container: span ;
      content: pending(figureNumber);
      move-to: figNum;
      pass: @pass-40-numbering-figs-tabs;
    }
    &::outside {
      class:  figure;
      container: div;
      content: content() pending(figNum) pending(figCaption);
      pass: @pass-40-numbering-figs-tabs;
    }
  }
  :not(table) > table {
    counter-increment: table;
    pass: @pass-40-numbering-figs-tabs;
    caption {
      container: div;
      class: caption;
      move-to: imageCaption;
      pass: @pass-40-numbering-figs-tabs;
    }
    &::after {
      container: a;
      attr-href: myLinkId;
      content: "Table." counter(chapNum)"."counter(table);
      move-to: tableNumber;
      pass: @pass-40-numbering-figs-tabs;
    }
    &:after {
      class: "table-number";
      container: div;
      content: pending(tableNumber);
      move-to: table-number;
      pass: @pass-40-numbering-figs-tabs;
    }
    &::outside {
      class: table;
      container: div;
      content: content() pending(table-number) pending(imageCaption);
      pass: @pass-40-numbering-figs-tabs;
    }
  }
}


.eoc {
  [data-type="exercise"] {
   [data-type="problem"]  {
    pass: @pass-20-numbering-eoc;
    counter-increment: exercises;
    &::before {
      pass: @pass-20-numbering-eoc;
      container: span;
      content: counter(exercises);
      node-set: exerciseNumber;
    }
  }
  [data-type="solution"] {
    &::before {
      pass: @pass-20-numbering-eoc;
      content: nodes(exerciseNumber);
    }
  }
}
}
}
