/*==========================================================
  ECONOMICS PAGES
==========================================================*/

//Make pages
$pageKeyTerms: (
  name: "Key Terms",
  source: "glossary",
  isGlossary: true,
  sortBy: "dl > dt"
);

/*
  Key Concepts and Summary

  These should be collated at the end of a chapter
  and separated by which section they came from.

  Markup: ./examples/book.composite.summary.html-cooked.html

  Style guide: book.composite.summary
*/
$pageSummary: (
  name: "Key Concepts and Summary",
  source: "summary",
  sectionSeparated: true
);

/*
  Self-Check Questions

  These should be collated at the end of a chapter
  and have answers collated at the end of the chapter.

  **Notes:** Even without the styling you can see a few problems with the ruleset code:

  1. the rulesets use the class attribute when they should use the `data-type`
  1. the solution is being duplicated
  1. the solution is inside the link text that points back to the problem
  1. new id's are generated rather than using the existing id attributes for the problem and solution

  Markup: ./examples/book.composite.self-check-questions.html-cooked.html

  Style guide: book.composite.self-check-questions
*/
$pageSelfCheck: (
  name: "Self-Check Questions",
  source: "self-check-questions",
  hasSolutions: true,
);

/*
  Review Questions

  These should be collated at the end of a chapter
  and have answers collated at the end of the chapter.

  Markup: ./examples/book.composite.review-questions.html-cooked.html

  Style guide: book.composite.review-questions
*/
$pageReviewQuestions: (
  name: "Review Questions",
  source: "review-questions",
  hasSolutions: false
);

/*
  Critical Thinking Questions

  These should be collated at the end of a chapter
  and have answers collated at the end of the chapter.

  Markup: ./examples/book.composite.critical-thinking.html-cooked.html

  Style guide: book.composite.critical-thinking
*/
$pageCriticalThinking: (
  name: "Critical Thinking Questions",
  source: "critical-thinking",
);

/*
  Problems

  These should be collated at the end of a chapter
  and have answers collated at the end of the chapter.

  Markup: ./examples/book.composite.problems.html-cooked.html

  Style guide: book.composite.problems
*/
$pageProblems: (
  name: "Problems",
  source: "problems",
  hasSolutions: true,
);
/*
  Test Prep For AP® Courses

  These should be collated at the end of a chapter
  and have answers collated at the end of the chapter.

  Markup: ./examples/book.composite.test-prep.html-cooked.html

  Style guide: book.composite.test-prep
*/
$pageTestPrep: (
  name: "Test Prep For AP® Courses",
  source: "ap-test-prep",
  hasSolutions: true,
);

/*
  References

  These should be collated at the end of a chapter
  and separated by which section they came from.

  Markup: ./examples/book.composite.references.html-cooked.html

  Style guide: book.composite.references
*/
$pageReferences: (
  name: "References",
  source: "references",
  sectionSeparated: true,
  chapterSeparated: false,
);

$pageIndex: (
  name: "Index",
  source: "index",
  isIndex: true
);

$pageSolutions: (
  name: "Answer Key",
  source: "solutions",
  chapterSeparated: true,
  compoundComposite: true,
  isAnswerKey: true,
);

$chapterCompositePages: (
  $pageKeyTerms,
  $pageSummary,
  $pageSelfCheck,
  $pageReviewQuestions,
  $pageCriticalThinking,
  $pageProblems,
  $pageTestPrep
);

$bookCompositePages: (
  //This doesn't get parsed as a list without a comma at the end
  //the composite builder should account for this rather than using hacky syntax
  $pageSolutions,
  $pageReferences,
  $pageIndex,
);

/*==========================================================
  ECONOMICS TITLING CONTENT
==========================================================*/

//unfortunately a base obj cannot be created for all Content because it would make the order of the keys static
//when they need to be able to be in any order because of possible changes in titling order between books
//Usage Note: key: class of the containing span, value: text that will go inside span
$chapterTitleContent: (
  number: counter(chapter),
  divider: " | "
);

$appendixTitleContent: (
  title-label: "Appendix ",
  number: counter(appendix, upper-alpha),
  divider: " : "
);

$sectionTitleContent: (
  number: counter(chapter) "." counter(section),
  divider: " | "
);

$exerciseTitleContent: (
  number: counter(exercise)
);

/*
  Link It Up note

  Contains a title "Link It Up"

  Markup: ./examples/page.note.linkup.html-cooked.html

  Style guide: page.note.linkup
*/
$linkupNote: (
  label: "Link It Up",
  selector: linkup
);

/*
  Bring It Home note

  Contains a title "Bring It Home" and a body containing a title and the contents of the note.

  Markup: ./examples/page.note.bringhome.html-cooked.html

  Style guide: page.note.bringhome
*/

$bringhomeNote: (
  label: "Bring It Home",
  selector: bringhome,
  isBodyWrapped: true
);

/*
  Clear It Up note

  Contains a title "Clear It Up" and a body containing a title and the contents of the note.

  Markup: ./examples/page.note.clearup.html-cooked.html

  Style guide: page.note.clearup
*/
$clearupNote: (
  label: "Clear It Up",
  selector: clearup,
  isBodyWrapped: true
);

/*
  Work It Out note

  Contains a title "Work It Out" and a body containing a title and the contents of the note.

  Markup: ./examples/page.note.workout.html-cooked.html

  Style guide: page.note.workout
*/
$workoutNote: (
  label: "Work It Out",
  selector: workout,
  isBodyWrapped: true
);


$captionTableNumber: (
  title-label: "Table ",
  number: counter(chapter) "." counter(table)
);

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionTableNumberAp: (
  title-label: "Table ",
  number: counter(appendix, upper-alpha) "." counter(table)
);

$captionFigNumber: (
  title-label: "Figure ",
  number: counter(chapter) "." counter(figure)
);

//TODO: Make a counter for both chapter and appendix, and automate the switch between standard and upper alpha counting?
$captionFigNumberAp: (
  title-label: "Figure ",
  number: counter(appendix, upper-alpha) "." counter(figure)
);

$symbolsSectionTitle: "Symbols";

/*==========================================================
  ECONOMICS CONFIG
==========================================================*/

$setTableCaption: (
  type: table,
  defaultContainer: caption,
  hasCaption: true,
  hasTitle: true
);

$setFigureCaption: (
  type: figure,
  defaultContainer: figcaption,
  hasCaption: true,
  hasTitle: true
);

//If this method of setting the content of the label explicity becomes a problem,
//try grabbing the numbering information from the element's header

//NOTE: These selectors MUST match the counting selectors or be more specific
//otherwise, the increment and the counter() call may fire in the wrong order
//This may be fixed in a later version of easybake
$targetLabels: (
  (
    selector: '.os-eoc [data-type="exercise"]',
    label: "Exercise " counter(chapter) "." counter(exercise)
  ),
  (
    selector: 'div[data-type="chapter"] .example',
    label: "Example " counter(chapter) "." counter(example)
  ),
  (
    selector: 'div[data-type="chapter"] .try',
    label: "Try It"
  ),
  (
    selector: '[data-type="chapter"] :not(table) > table',
    label: "Table " counter(chapter) "." counter(table)
  ),
  (
    selector: '[data-type="chapter"] :not(figure) > figure',
    label: "Figure " counter(chapter) "." counter(figure)
  ),
  (
    selector: '[data-type="appendix"] :not(table) > table',
    label: "Table " counter(appendix, upper-alpha) "." counter(table)
  ),
  (
    selector: '[data-type="appendix"] :not(figure) > figure',
    label: "Table " counter(appendix, upper-alpha) "." counter(figure)
  )
);
